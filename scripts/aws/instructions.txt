for creating IAM role:

aws iam create-role --role-name LambdaS3Remediator --assume-role-policy-document '{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Principal": { "Service": "lambda.amazonaws.com" },
            "Action": "sts:AssumeRole"
        }
    ]
}'


for attaching permissions:

aws iam attach-role-policy --role-name LambdaS3Remediator --policy-arn arn:aws:iam::aws:policy/AmazonS3FullAccess
aws iam attach-role-policy --role-name LambdaS3Remediator --policy-arn arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole



for creating lambda function :

aws lambda create-function --function-name RemediatePublicS3 \
    --runtime python3.9 \
    --role arn:aws:iam::<034362029668>:role/LambdaS3Remediator \
    --handler lambda_function.lambda_handler \
    --zip-file fileb://lambda_function.zip


creating an Eventbridge :

aws events put-rule --name "DetectPublicS3Buckets" \
    --event-pattern '{
        "source": ["aws.s3"],
        "detail-type": ["AWS API Call via CloudTrail"],
        "detail": {
            "eventSource": ["s3.amazonaws.com"],
            "eventName": ["PutBucketAcl", "PutObjectAcl"],
            "requestParameters": {
                "x-amz-acl": ["public-read", "public-read-write"]
            }
        }
    }'


attaching lambda_function to Eventbridge

aws events put-targets --rule "DetectPublicS3Buckets" --targets "Id"="1","Arn"="$(aws lambda get-function --function-name RemediatePublicS3 --query 'Configuration.FunctionArn' --output text)"



Grant EventBridge permissions to invoke Lambda :

aws lambda add-permission --function-name RemediatePublicS3 \
    --statement-id AllowEventBridgeInvocation \
    --action lambda:InvokeFunction \
    --principal events.amazonaws.com \
    --source-arn $(aws events describe-rule --name DetectPublicS3Buckets --query 'Arn' --output text)




you can test if you need!!